#BlueJ class context
comment0.params=
comment0.target=void\ init()
comment0.text=\n\ Initializes\ the\ symja\ engine.\n
comment1.params=expression
comment1.target=java.lang.String\ expand(java.lang.String)
comment1.text=\n\ Expands\ and\ simplifies\ an\ expression.\n
comment2.params=expression\ var
comment2.target=java.lang.String\ integrate(java.lang.String,\ java.lang.String)
comment2.text=\n\ Integrates\ an\ expression\ with\ respect\ to\ a\ given\ variable.\n
comment3.params=expression\ var
comment3.target=java.lang.String\ derive(java.lang.String,\ java.lang.String)
comment3.text=\n\ Derives\ an\ expression\ with\ respect\ to\ a\ given\ variable.\n
comment4.params=expression
comment4.target=java.lang.String\ factor(java.lang.String)
comment4.text=\n\ Factor\ an\ expression.\n
comment5.params=expression
comment5.target=java.lang.String\ apart(java.lang.String)
comment5.text=\n\ Splits\ the\ expressions\ as\ far\ apart\ as\ possible.\n
comment6.params=expression
comment6.target=java.lang.String[]\ roots(java.lang.String)
comment6.text=\n\ Returns\ a\ String[]\ containing\ the\ roots\ of\ the\ given\ expression.\n
comment7.params=system\ vars
comment7.target=java.lang.String[]\ solve(java.lang.String[],\ java.lang.String[])
comment7.text=\n\ Solve\ a\ system\ of\ equations\ for\ the\ specified\ variables.\n
comment8.params=expression
comment8.target=java.lang.String\ evalN(java.lang.String)
comment8.text=\n\ Evaluate\ some\ expression\ numerically.\n
comment9.params=expression
comment9.target=java.lang.String\ eval(java.lang.String)
comment9.text=\n\ Evaluate\ some\ expression\ using\ the\ symja\ engine.\n
numComments=10
